openapi: "3.0.0"     title: Ecommerce Store API - learnCodeWithSaddam description: Free Open source REST API version: 1.0.1 contact:
        name: Saddam Arbaa email: "saddamarbaas@gmai license:     name: "Apa
servers:rl: "{serverUrl}/api/{apiVersionariables:
          apiVersion:
              default: v1            - v1 - v2 - v3
          serverUrl:
              description: Environment -  Production, Staging, Test or Dev default: http://localhost:8000 enum:
                  - https://saddam-rest-api.herokuapp.com - https://saddam-rest-api.herokuapp.com - https://saddam-rest-api.herokuapp.com - http://localhost:8000

paths:
    # Health Check
    /:ry: Api health check endpoint tags:
                - HealthCheck
            responses:   "200":       description: OK content:
                        application/json:           schema:               "$ref": "#/components/sch
    # Health Check

    /healthChecker:
        get:
            summary: Api health check endpoint tags:
                - HealthCheck
            responses:     "200":
                    description: OK content:
                        application/json:
                            schema:
                                "$r
    # Products

    /products:
        get:
            summary: Returns a list of products (can search, sort by each filed, filter by each filed) tags:
                - Product
            description: parameters:
                - in: query
                  name: limit schema:           type: integer minimum: 1 example: 10
                  description: The numbers of items to return (the default value is 20)
                - in: query
                  name: page schema:
                      type: integer   # minimum: 1 example: 1
                  description: Pagination page number (the default value is 1)
                - in: query
                  name: sort schema:
                      type: string example: "price,-ratings"
                  description: Sort query (the default is sort by lowest price and highest rating
                - in: query
                  name: category schema:
                      type: string example:
                  description: Filter by Category name (Example - books,toys,jewelery,personal compute     - in: query
                  name: search schema:
                      ty       description: search term (Example - nodejs)
            responses:
                "200": # stat   description: OK content:
                        application       sche           type: object properties:
                                    success:
                                        type: boolean example: true description:
                                                   type: boolean example: false
                                    status:
                                               message:
                                        type: string example: Successful Found products
                                    data:
                                                       totalDocs:
                                                         totalPages:
                                                type: integer
                                            lastPage:
                                                           count:
                                                         currentPage:
                                                type: object properties:
                                                    page:
                                                                 limit:
                                                         nextPage:
                                                type: object properties:
                                                    page:
                                                        type: integer minimum: 1
                                                                        type: integer minimum: 1
                                            products:
                                                type: array items:
                                            
                "400":
                    description: Bad request content:n:
                                "$ref": "#/components/schemas/BadRequestResponse"

                    description: 500 Internal Server Error content:
                        application/json:
                                "$ref": "#/components/schemas/ServerErrorResponse"

        get:
            summary: Returns 5 top cheapest and high
            description: responses:
                "200":
                        application/json:
                            schema:
                                type: object properties:
                                    success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:nteger example: 200
                                    message:
                                        type: string example: Success
                                        type: object properties:
                                            totalDocs:nteger minimum: 0
                                            totalPages:
                                                type: integetPage:
                                                type: integer
                                            count:nteger
                                            currentPage:
                                                type: object propertie:
                                                        type: integer minimum: 1
                                                    limit:         type: integer minimum: 1
                                            nextPage:e: object properties:
                                                    page:
                                                        type: integer minimum: 1
                                                                                 type: integer minimum: 1
                                            products:
                                                type: array items:
                                                    type: object "$ref": "#/components/schemas/ProductResponse"

                "400":
                    description: Bad request content:     application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server Error content:
                        application/json:
                            schema:                     "$ref": "#/components/schemas/ServerErrorResponse"

    /products/{productId:
            summary: Get product based on request id tags:
                - Producters:
                - in: path
                  name: productId required: true description: Unique id schema:
                      type: string minimum: 
                "200":
                    description: OK content:n:
                                type: object properties:
                                    success: type: boolean example: true description:
                                    error:
                                        type: booleantus:
                                        type: integer example: 200
                                    message: type: string example: Successfully found product by ID ...
                                    data:
                                        type: object     product:
                                                type: object "$ref": "#/components/schemas/ProductResponse"
                "400":ntent:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server Error content:
                        application/json:
                            schema:onents/schemas/ServerErrorResponse"

    /products/reviews:
            security:
                - Authorization: []roduct tags:
                - Product
            requestBody:content:
                    application/json:
                        schema:
                                productId:
                                    type: string minimum: 1 example: 
                                    type: string example: great and modern product
                                rating:r example: 4.9
            responses:
                    description: OK content:
                        application/json:
                            schema:             type: object properties:
                                    success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                        type: integer exam                 message:
                                        type: string example: Successfully add review to product .....
                                    data:
                                        type: object properties:
                                            product:
                                                type: object "$ref": "#/components/schemas/ProductResponse"

                "400":         description: Bad request content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"
500":   description: 500 Int       application/json:
                            schema           
    /products/reviews/{productId}:
        get:
            summary: Get list of reroduct
            parameters:
                - in: path
                  name: productId required: ing minimum: 1 example: 6398540ee6e5ae8c37c333ac
            responses:
                "200":tent:n:
                            schema:
                                type: object properticess:
                                        type: boolean example: true description:
                                    error: type: boolean example: false
                                    status:
                                        type: integesage:
                                        type: string example: Successfully found reviews for product by ID ...
                                    data: type: object properties:
                                            reviews:
                                                type: array      type: object "$ref": "#/components/schemas/ProductResponse"

                "400": description: Bad request content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server Error     application/json:
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

        delete:
            security:
                - Authorization: []
            summary: Delete review and comment based on request id tags:
                - Product
            parameters:     - in: path
                  name: productId required: true description: Unique id schema:
                      type: string minimum: 1 example: 6398540ee6e5ae8c37c333ac
            responses: "200":     description: OK content:
                        application/json:
                            schema:
                                type: ob         success:
                                        type: boolean example: true description:
                                    error:     type:  status:
                                        type: integer example: 200
                                    message:     type: string example: Successfully deleted review from product by ID ...
                                    data:
                                        type: ob         product:
                                                type: object "$ref": "#/components/schemas/ProductResponse"
                "400":
                    description: Ba     application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                    description: 500 Internal Server Error content:
                        application/json: "#/components/schemas/ServerErrorResponse"

    # Cart
    /cart:
        get:security:
                - Authorization: []
            tags:
            description: responses:
                "200":tent:
                        application/json:
                            schema:operties:
                                    success:
                                        type: boolean example: true description:
                                    error:                     type: boolean example: false
                                    status:
                                        type: integer example: 200
                                    message:
                                        type: string example: Successfully found cart
                                    data:
                                        type: object prope                         products:
                                                type: array items:
                                                    type: object "$ref": "#/components/schemas/CartResponse"
                                            userId:
                                                type: string

                "400":
                    description: Bad request content:             application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":   description:       application/json           schema:
                                "$
            summary: Add product to user cart security:
                - Authorization: []
            tags:art
            parameters:
                - in: query
                  name: decrease schema:lean default: false
            description: requestBody:
                description: "" required: true conten
                            type: object properties:
                                productId:e: string minimum: 1 example: 63a1a5929ef261c4347fadc9
            responses:
                "201":tent:
                        application/json:
                            schema:bject properties:
                                    success:
                                        type: booleaor:
                                        type: boolean example: false
                                    status:nteger example: 201
                                    message:g example: "Successfully added product to cart: 63a1a5929ef261c4347fadc9"
                                    data:
                                        type: object properties:
                                                                         type: array items:
                                                    type: object "$ref": "#/components/schemas/AuthCartResponse"

                "400":
                    description: Bad request content:
                        application/json:
                            schema:             "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server Error content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

    /cart/delete-item:t:
            summary: Delete item from cart security:
                - Authorization: []
            tags:
                - CartstBody:escription: "" required   application/json:
                        schema:       type           productId:
                                    type: string minimum: 1 example: 63a1a5929ef261c4347fadc9
            responses:
                "200": description: OK content:
                        application/json:
                            schema:
                                type: object     success:
                                        type: boolean example: true description:
                                    error: type: booleantus:
                                        type: integer example: 200
                                    message: type: string example: "`Successfully Removed items : 63a1a5929ef261c4347fadc9 from Cart "
                                    data:
                                        type: object      products:
                                                type: array items:
                                                    
                "400":
                    description: Bad request contentn:
                            schema:
                                "$ref": "#/components/schema
                "500":
                    description: 500 Interna     application/json:
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

    /cart/clear-cart:
        delete:
            security:uthorization: []
            summary: Clear user cart tags:
                - Cart
            responses:
                "200":
                    description: OK content:
                        application/json:
                            schema:
                                type: object properties:
                                    su                             type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                                 message:
                                        type: string example: Successfully Cleared cart
                                                        type: object properties:
                                            user:
                                                $ref: "#/components/schemas/AuthResponse"
                "400":: Bad request content:
                        application/json:
                            schema: "#/components
                "500":
                    description: 500 Internal Server n:
                            schema:
                                "$ref": "#/components
    # Orders

        get:
            summary: Returns a list of orders securi
            tags:
                - Order
                "200":
                        application/json:
                            schema:
                                type: object properties:
                                    success:
                                        type                 error:
                                        type: boolean example: false
                                    status:
                                        type: integer example: 200
                                    message:
                                        type: string example: Successful Found all your orders
                                    data:                     type: object properties:
                                            orders:
                                                type: object "$ref": "#/components/schemas/OrderResponse"

                "400":
                    description: Bad request content:
                        application/json:                 schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server Error content:
                        application/json:
                            sche               "$ref": "#/components/schemas/ServerErrorResponse"

            summary: Pro     - Authorization: []
            tags: - Ordercription: requestBody:
                description: "" required: true content:
                    application/json:
                        schema: type: object properties:
                                orderItems:
                                    items:     type:          product:
                                                type: string example: 63aa95109e8eb8a0f45c412e
                                            quantity:
                                                paymentInfo:
                                    type: string minimum: 1 example: strip
                                orderStatus:
                                    type: st         - "pending" - "delivered" - "waiting payment" - "waiting pickup" - "shipped" - "cancelled" - "completed"
                                    default: "pending"
                                textAmount:e: number minigAmount:
                                    type: number minimum: 1 example: 40
                                totalAmount:e: number minimum: 1 example: 100
                                shippingInfo:
                                    type: object prop address:
                                            type: string example: "Tiban center 12"
                                        street:     type: string example: "23 frey terminal"
                                        city:
                                            type: st country:
                                            type: string example: "Indonesia"
                                        zipCode:e: string example: "Cd544"
                                        status:tring example: "Tiban center 12"
                                        phoneNo:
                                            type: string example: "+6285366666"
es:
                "201":
                    description: OK content:
                        application/json:
                            schema:
                                type: object properties:
                                    success:                     type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                        type: integer example: 201
                                    message:
                                        type: string example: Thank you, your orders will be shipped in 2-3 business days
                                    data:                             type: object properties:
                                            order:
                                                type: object "$ref": "#/components/schemas/OrderResponse"

                "400":
                    description         applic             schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":tion: 500 Internal Server Error content:
                        application/json:
                            schema:ef": "#/com
    /orders/invoices/{orderId}:
        get:
            summary: Generate user uthorization: []
            tags:
                - Order
            parameters:
                  name: orderId required: true description: Unique id schema:
                      type: string minimum: 1 example
                    description: OK content:
                        application/pdf:
                                type: string format: binary

                    description: Bad request content:
                        application/json:
                                "$ref": "#/components/schemas/BadRequestResponse"

                    description: 500 Internal Server Error content:
                        application/json:
                                "$ref": "#/components/schemas/Se
    /orders/{orderId}:
        get:
            summary: Get single order based uthorization: []
            tags:
                - Order
            description: parameters:
                - in: path
                  name: orderId required: true description: Unique id schema:
                      type: string minimum: 1 example: 639es:
                "200":
                    description: OK content:
                        application/json:
                            schema:
                                type: object properties:
                                    success:
                                        type: boolean example: true description:
                                    error:
                                                             status:
                                        type: integer example: 200
                                    message:
                                        type: string example: Successfully found order by ID ....
                                                        type: object properties:
                                            order:
                                                type: object "$ref": "#/components/schemas/OrderResponse"

                    description: Bad request content:
                        application/json: "#/components/schemas/BadRequestResponse"

                "500":ternal Server Error content:
                        application/json:
                            schema: "#/components/schemas/ServerErrorResponse"

        delete:r based on request id security:
                - Authorization: []
            tags:
            parameters:
                - in: path
                  name: orderId required: true description: Unique id schema:
                      type: string minimum: tion: responses:
                "200":
                    description: OK content:
                        application/json:
                            schema:
                                type: object properties:
                                    success:                     type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                        type: integer example: 200
                                    message:
                                        type: string example: Successfully deleted order by ID ...
                                    data:
                                        type: object nullable: true example: null
     "400":
                    description: Bad request content:
                        application/json:
                            schema:
                        
                "500":
                    description: 50     application/json:
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

        delete:
            summary: Clear all the user order list se
                - Order
            description: responses:
                    description: OK content:
                        application/json:
                                type: object properties:
                                    success: type: boolean example: true description:
                                    error:
                                        type: booleatus:
                                        type: integer example: 200
                                    message:tring example: Successful Cleared all orders
                                    data:
                                        type: object properties:
                                                                         type: array items:
                                                    type: string
                                                maxItems: 0

                "400":
                    description: Bad request content:
                        application/json:         schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server Error content:
                        application/json:
                            schema:                     "$ref": "#/components/schemas/ServerErrorResponse"

    /payment/create-stripe-checkout-session:
        post:
            summary: Cre     - Payment
            security: - Authorizatiocription: requestBody:
                description: "" required: true content:
                    application/json:
                        schema: type: object properties:
                                orderItems:
                                    items:
                                        type: object     product:
                                                type: object properties:
                                                    name:         type: string default: "Clean code book in js"
                                                    _id:
                                                        type     price:
                                                        type: number default: 2
                                                                            productImage:
                                                        type: string default: "/static/uploads/products/productImage-b2f8042f-58ef-479a-a817-b5636e5eaf5b.png"
                                            quan             type: number example: 2
            responses:tent:n:bject properticess:
                                        type: boolean example: true description:
                                    error:
                                        type: bo status:     type: integer example: 200
                                    message:
                                        type: st data:     type: object properties:
                                            url:
                                                
                    description: Bad request content:
                        application/json:
                                "$ref": "#/components/schemas/BadRequestResponse"

                    description: 500 Internal Server Error content:
                        application/json:
                                "$ref": "#/components/schemas/ServerErrorResponse"

        get:
            summary: Returns a stripe public key for Fro
            security:
                - Authorization: []
                "200":
                    description: OK content:
                            schema:
                                type: object properties::
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                                        type: integer example: 200
                                    message:
                                        type: string example: Success
                                    data:         type: object properties:
                                            stripeKey:
                                                type:
                    description: Bad request content:
                        application/json:
                                "$ref": "#/components/schemas/BadRequestResponse"

                    description: 500 Internal Server Error content:
                        application/json:
                                "$ref": "#/components/schemas/ServerErrorResponse"
    /payment/captureStripePayment:
            summary: Api to capture stripe payment (TODO) tags:
                - Payment
                - Authorization: []
            description: requestBody:
                content: application/json:
                        schema:
                            type: object properties:
                                amount:
                                    type: number example: 5
            responses:
                "200": description: OK content:
                        application/json:
                            schema:
                                type: object properties:
                                    success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false                         status:
                                        type: integer example: 200
                                    message:
                                        type: string example: Payment Success
                                    data:
                                        type: object properties:
                                              400":
                    description: B   applicat       schema:
                        
                "500":
                    description: 50     application/json:
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"


    /feed/posts:
        get:: Returns a list of posts (can search, sort by each filed, filter by each filed) tags:
                - Post
            description: parameters:
                - in: query
                  name: limit schema:
                      type: integer minimum: 1 example: 10
                  description: The numbers of items to retn: query
                  name: page schema:
                      type: integer
                      # minimum: 1 example: 1
                  description: Pagination page number (the default value is 1)
                - in: query
                  name: sort schema:
                      type: string example:       description: Sort query
                - in: query
                  name: category schema:
                      type: string example:
                  descri     - in: query
                  name: search schema:
                      type: str description: snses:200": # status code
                    description: O   applicat       schema:
                                type: object properties:
                                    success:
                                                    error:
                                        type: boolean example: false
                                    status:
                                        type     message:
                                        type: string example: Successful Found posts
                                    data: type: object      totalDocs:
                                                type: integer minimum: 0
                                            totalPage         type: integer
                                            lastPage:
                                                type:     count:
                                                type: integer
                                            currentP         type: object properties:
                                                    page:
                                                                 limit:
                                                        type: integer minimum: 1
                                            nextPage: type: object properties:
                                                    page:
                                                        type: integer minimum: 1
                                                                                 type: integer minimum: 1
                                            posts:
                                                type: array items:
                                                    type: object "$ref": "#/components/schemas/PostResponse"

                "400":
                    description: Bad request content:     application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server Error content:
                        application/json:                 schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

        post:
            security:
                - Authorization: []
            summary: Add a new  PoststBody:equired: true content:
                    multipart/form   schema:       "$ref": "#/components/schemas/PostRequest"
                                         postImage:
                                contentType: application/octet-stream
es:
                "201":
                    description: OK content:
                        application/json:ema:
                                type: object properties:
                                    success: type: booleanor:
                                        type: boolean example: false
                                    status: type: integer example: 201
                                    message:
                                        type: string a:
                                        type: object properties:
                                            post:         type: object "$ref": "#/components/schemas/PostResponse"

                "400":quest content:n:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"
0":
                    description: 500 Internal Server Error content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

    /feed/posts/timeline:
            summary: Returns a list of timeline posts for auth user tags:
                - Post
            security:
                - Authorization: []
            responses:
                "200":
                    description: OK content:             application/json:
                            schema:
                                type: object properties:
                                    success:
                                                 error:
                                        type: boolean example: false
                                                        type: integer example: 200
                                    message:
                                        type: string example: Successful Found posts
                                    data:         type: object properties:
                                            posts:
                                                type:             t
                    description: Bad request content:
                        application/json:
                                "$ref": "#/components/schemas/BadRequestResponse"

                    description: 500 Internal Server Error content:
                        application/json:
                                "$ref": "#/components/schemas/ServerErrorResponse"

        get:
            summary: Get post based on request id tags:
            parameters:
                - in: path
                  name: postId required: true description: Unique id schema:
                      type: string minimum: 1 example: 63baa65d8d3ae49ad7361509
            responses:0":
                    description: OK content:
                        application/json:
                            schema:
                                type: object properties:
                                    success:
                                        type: boolean exam                 error:
                                        type: boolean example: false
                                    status:
                                        type: integer example: 200
                                    message:
                                        type: string example: Successfully found post by ID ...
                                    data:
                                        type: object properties:                                 post:
                                                type: object "$ref": "#/components/schemas/PostResponse"
                "400":
                    description: Bad request content:
                                         schema:
                                "500":
                    description: 500 Internal Server Error content:
                        application/json:
                            schema:     "$ref": "#/components/schemas/ServerErrorResponse"

        patch:
            security:
            summary: Update post based on request id tags:
                - Post
                - in: path
                  name: postId required: true description: Unique id63bae1dbc7c5b2f65f3cbd97
            requestBody:
                required: true content:
                        schema:
                            "$ref": "#/components/schemas/PostReques
                "200":
                    description: OK content:
                            schema:
                                type: object properties:
                                        type: boolean example: true description:
                                    error:oolean example: false
                                    status:
                                        type: integer example: 200
                                                        type: string example: Successfully update post by ID ...
                                    data:
                                        type: object properties:
                                                             type: object "$ref": "#/components/schemas/PostResponse"

                "400":quest content:n:
                            schema:
                                "$ref": "#/components
                "500":
                    description: 500 Internal Server n:
                            schema:
                                "$ref": "#/component
        delete:
            security:
            summary: Delete post based on request id tags:
                - Post
            parameters:
                - in: path
                  name: postId required: tru   type: string minimum: 1 example: 63bae1dbc7c5b2f65f3cbd97
            responses:
                "200":
                    description: OK content:
                        application/json:
                            schema:
                                type: object properties:                 success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                        type: integer example: 200
                                    message:
                                        type: string example: Successfully deleted post by                         data:
                                        type: object nullable: true example: null
                "400":
                    description: Bad request content:
                                         schema:
                                "$ref": "#/components/schemas/BadRequestResponse"
0":
                    description: 500 Internal Server Error content:
                        application/json:
                            schema: "$ref": "#/components/schemas/ServerErrorResponse"

    /feed/posts/{postId}/like:
                - Authorization: []
            summary: Like or unlike post based on req
            parameters:
                - in: path: true description: Unique id schema:
                      type: string minimum: 1 example: 63bae1dbc7c5b2f65f3cbd97
            responses:
                    description: OK content:
                        application/json:
                                type: object properties:
                                    success:
                                        type: boolean example: true description:
                                    error:
                                        type                 status:
                                        type: integer example: 200
                                    message:
                                        type: string example: Successfully like/un-like post by ID ...
                                    data:
                                        type: object properties:
                                            post:                             type: object "$ref": "#/components/schemas/PostResponse"

                "400":
                    description: Bad request content:
                        application/json:
                            schema:
                                "$ref": "#/components/sch
                "500":
                    description: 500 Internal Server Error content:
                        application/json:
                                             "$ref": "#/components/schemas/ServerErrorResponse"

    /feed/posts/user-posts:
        get:
            summary: Returns a list of p
            security:
                - Authorization: []
                "200":
                    description: OK content:
                        application         schema:
                                type: object properties:
                                    success:
                                        type     error:
                                        type: boolean example: false
                                    status: type: integersage:
                                        type: string example: Successfully found all posts for user by ID ...
                                    data: type: object properties:
                                            posts:
                                                type:             type: object "$ref": "#/components/schemas/PostResponse"
                "400":
                    description: Bad request contentn:
                            schema:
                                "$ref": "#/component
                "500":
                    description: 500 Internal Server Error content:
                        application/json:
                            schema:
                                "$ref": "#/c
        delete:
            security:
                - Authorization: []
            summary: Delete all posts for given user tags:
                - Post
            responses:0":
                    description: OK content:
                        application/json:
                            schema:
                                type: object properties:
                                    success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:                             type: integer example: 200
                                    message:
                                                 data:
                                        type: object nullable: true example: null
                "400":   description: Bad request content:
                        application       sche           "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    descript       application/json:
                            schema:
                                "$
    /feed/posts/comment:
        put:
            security: Authorization: []
            summary: Add comment tt
            requestBody:
                required: true content:
                    application/       schema:
                            "$ref"
            responses:
                "200":
                    descriptio       application/json:
                            schema           type: object properties:
                                    success:
                                        type: boolean example: true description:
                                    error:
                                                    status:
                                        type: integer example: 200
                                    message:
                                        type     data:
                                        type: object properties:
                                            post:         type:
        patch:
            security:
            summary: Update comment tags:
                - Post
                required: true content:
                    application/json:
                            "$ref": "#/components/schemas/updatePostCommentRequest"

                "200":
                    description: OK content:
                            schema:
                                type: object properties:
                                    success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                        type: integer exampl
                                        type: string example: Successfully add comment to post by ID ...
                                    data:operties:
                                            post:
                                                type: object "$ref": 
                "400":
                    description: Bad request content:
                            schema:
                                "$ref": "#/components/schemas/BadRequ
                "500":
                    description: 500 Internal Server Error content:
                            schema:
                                "$ref": "#/components/schem
        delete:
                - Authorization: []
            summary: Delete one comment based on request id tags:
                - PostBody:
                required: true content:
                    application/json:
                        schema:
                            "$ref": "#/components/schemas/DeletePostCommentRequest"
            responses:
                "200": description: OK content:
                        application/json:
                            schema:
                                type: object properties:
                                    success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                                                type: integer example: 200
                                    message:
                                        type: string example: Successfully delete comment by ID ...
                                                       type: object properties:
                                            post:
                                                type: object "$ref": "#/components/schemas/PostResponse"

                "400":
                    description: Bad request content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500": description: 500 Internal Server Error content:
                        application/json:
                            schema:
                                "$ref": "#/c
    /feed/posts/comment/{postId}:
        get:n the given po
            security:
                - Authorization: []
                - in: path
                  name: postId required: true descripmum: 1 example: 6394b75d22f4732bfa7ca6ef
            responses:
                "200":tent:
                        application/json:
                            schema:bject properties:
                                    success:
                                        type: boolean exampl
                                        type: boolean example: false
                                    status:
                                        type                 message:
                                        type: string example: Successfully found all comments for post by ID ...
                                    data:
                                        type: object properties:
                                            comments:
                                                type: array items:
                                                    type: 
        delete:
            security:
                - Authorization: []
            summary: Delete all comments in the given post tags:
                - Post
            parameters:
                - in: path       name: postId required: true description: Unique id schema:
                      type: string minimum: 1 example: 63bae1dbc7c5b2f65f3cbd97
            responses:
                "200":
                    description: OK content:
                        application/json:
                            schema:             type: object properties:
                                    success:
                                        type: boolean example: true description:
                                    error:         type: boolean example: false
                                    status:
                                        type: integersage: type: string example: Successfully deleted all comments in post by ID ...
                                    data:
                                        type: object      post:
                                                type: object "$ref": "#/components/schemas/PostResponse"

                    description: Bad request content:
                        application/json:
                                "$ref": "#/components/schemas/BadRequestResponse"

                    description: 500 Internal Server Error content:
                        application/json:
                                "$ref": "#/components/schemas/Se
    /feed/posts/user-comment/{postId}:
        get:: Get all comments for the current login user in the given post tags:
                - Post
            security:
                - Authorization: []
            description: parameters:
                - in: path
                  name: postId required: true description:   type: string minimum: 1 example: 6394b75d22f4732bfa7ca6ef
            responses:
                "200":
                    description: OK content:
                        application/json:
                            schema:
                                type: object properties:
                                    success:                             type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                                                                       data:
                                                                        type: array items:
                                                    type: object "$ref": "#/components/schemas/PostCommentResponse"

        delete:y:
                - Authorization: []
            summary: Delete all comments for the current login user or the given user in the given post tags:
                - Post
                - in: path
                  name: postId required: true descripmum: 1 example
                required: false content:
                    application/json:
                            type: object properties:
                                userId:e: string example: 63bae1dbc7c5b2f65f3cbd97
            responses:
                "200":tent:
                        application/json:
                            schema:bject properties:
                                    success:
                                        type: boolean exampl
                                        type: boolean example: false
                                    status:                     type: integer example: 200
                                    message:
                                        type: string example: Successfully delete all user comments in post by ID ...
                                    data:
                                        type: object properties:
                                            post:
                                                type: obje
                "400":
                    description: Bad request content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server             application/json:
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

    /feed/posts/comment/{postIry: Get one comment bas Post
            security:horization:on: parameters:
                - in: path
                  name: postId       type: string minimum: 1 example: 6394b75d22f4732bfa7ca6ef
                - in: path
                  name: commentId required: true description: Unique id schema:
                      type: string minimum: 1 example: 6394b75d22f4732bfa7ca6ef
            responses:
                "200":
                    description: OK     application/json:
                            schema:
                                type: object properties:
                                    success:         type: boolean example: true description:
                                    error:
                                        type: booleantus: type: integer example: 200
                                    message:
                                        type: string a:
                                        type: object properties:
                                            comment:         type: object "$ref": "#/components/schemas/PostCommentResponse"

    # Auth
    /auth/signup:
        post:tags:
                - Auth
            requestBody:
                    multipart/form-data:
                        schema:
                            $ref: "#/componees:
                "200":
                    description: OK content:
                        application/json:
                            schema:
                                type: object properties:
                                    success:                     type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                        type: integer example: 200
                                    message:
                                        type: string example: Auth Signup is success. An Email with Verification link has been sent to your account ${email} Please Verify Your Email first or use the
                                        email verification lik which is been send with the response body to verfiy your email
                                    data:                             type: object properties:
                                            user:
                                                type: object properties:
                                                    accessToken:
                                                                                                       emailVerificationLinkToken:
                                  :
                    description: Bad request content:
                        application/json:
                            schema:             "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internation/json:
                            schema:
                                "$ref": "#/components
        post:
            summary: Authenticate a user tags:
            requestBody:
                description: "" required: true conten
                        schema:
                            type: object properties:
                                    type: string example: testverstion@gmail.com
                                password:e: string examp
                "200":
                    description: OK content:     application/json:
                            schema:
                                type: object properties:
                                    success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean exam                 status:
                                        type: integer example: 200
                                    message:
                                        type: string example: Auth logged in successful
                                    data:
                                        type: object properties:
                                            accessToken:
                                                type: string
                                            refreshToken:
                                                type: string                                 user:
                                                $ref: "#/components/schemas/AuthResponse"

                "400":
                    descriptio       applicat           schema:               "$ref": "#/components/schemas/BadRequestResponse"
:escription: 500 Internal Server Error content:
                        application/json:
                            schema:
                                "$r
    /auth/me:
        get:
            security:: []
            summary: Return user profile tags:
                - Auth
                    description: OK content:
                        application/json:
                                type: object properties:
                                    success: type: boolean example: true description:
                                    error:
                                        type: booleatus:
                                        type: integer example: 200
                                    message: type: string example: "Successfully found user profile 🍀"
                                    data:
                                        type: object propertr:
                                                $ref: "#/components/schemas/AuthResponse"

                "400": description: Bad request content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server Error     application/json:
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

    /auth/logout:
        post:
            summary: Un authenticate a user tags:
                - Auth requestBody:
                description: "" required: true content:
                    application/json:
                        schema:
                            type: object properties:
                                refreshToken:
                                                    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MzU4YmU5YWNhMzBiOThlMGU2OGQwM2QiLCJpYXQiOjE2NzAxNTUxODEsImV4cCI6MTcwMTcxMjc4MSwiYXVkIjoiNjM1OGJlOWFjYTMwYjk4ZTBlNjhkMDNkIiwiaXNzIjoidGVzdG5kb2Vqcy5jb20ifQ.CIAighkM5LkNMRZ4pnzhZ-sjXurZA8Sd1qKq4VYuZXw

            responses:
                "200":: OK content:
                        application/json:
                            schema:bject properticess:
                                        type: boolean example: true description:
                                    error: type: boolean example: false
                                    status:
                                        type: integersage:
                                        type: string example: Auth logout success
                                    data: type: object nullable: true example: null

                "400":quest content:
                        application/json:
                            schema:onents/schemas/BadRequestResponse"

                    description: 500 Internal Server Error content:
                        application/json:         schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

    /auth/update/{userId}:
        patch:
            security:
                - Authorization: []: Edit user based on request id tags:
                - Auth
            parameters:
                - in: path
                  name: userId required: true description: Unique id schema:
                      type: string minimum: 1 example: 6358c2odca30b98e0e68d063
            requestBody:
                required: true content:
                    multipart/form-data:             schema:
                            $ref: "#/components/schemas/AuthRequest"
            responses:
                "200":
                    description: OK     application/json:
                            schema:
                                type: object properties:
                                    success:         type: boolean example: true description:
                                    error:
                                        type: booleantus: type: integer example: 200
                                    message:
                                        type: string a:
                                        type: object "$ref": "#/components/schemas/AuthResponse"

                    description: Bad request content:
                        application/json:
                                "$ref": "#/components/schemas/BadRequestResponse"
ternal Server Error content:
                        application/json:
                            schema:             "$ref": "#/components/schemas/ServerErrorResponse"

    /auth/remove/{userId}:
        delete:
            security:
                - Authorization: []
            summary: Delete user based on request id tags:uth
            parameters:
                - in: path
                  name: userId required: true description: Unique id schema:
                      type: string minimum: 1 example: 6358c2odca30b98e0e68d063
            responses:
                "200":
                    description: OK content:
                        application/json:
                            schema:                     type: object properties:
                                    success:
                                        type: boolean example: true description:
                                                       type: boolean example: false
                                    status:
                                        type: integer example: 200
                                    message:
                                        type: string example: Successfully deleted user by ID ...
                                    data:
                                        type: object nullable: true example: null
                "400": description: Bad request content:
                        application/json:
                            schema:
                                "$ref": "#/c
                "500":
                    description: 500 Internal Server n:
                                "$ref": "#/components/schemas/ServerErrorResponse"
:
        get:
            summary: Verify auth email tags:
            description: parameters:
                - in: path: true description: Unique id schema:
                      type: string minimum: 1 example: 6394b75d22f4732bfa7ca6ef
                - in: path true description: Unique token schema:
                      type: string minimum: 1 example:
                      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e
                "200":
                    description: OK content:
                        application/json:
                            schema:
                                typ                         success:
                                        type: boolean example: true description:
                                    error:
                                                   status:
                                        type: integer example: 200
                                    message:
                                        type: string example: Your account has been successfully verified . Please Login
                                    data:
                                        type: object nullable: true example: null

                "400": description: Bad request content:
                        application/json:
                            schema:
                                "$ref": "#/c
                "500":
                    description: 500 Internal Server n:
                                "$ref": "#/components/schemas/ServerErrorResponse"

        post:
            summary: Get new access and refresh token
            requestBody:
                description: "" required: true conte
                        schema:
                            type: object properties:Token:
                                    type: string minimum: 1 example: 6358c27dca30b98e0e68d063
            responses:
                    description: OK content:
                        application/json:
                            schema:             type: object properties:
                                    success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                        type: integer exam                 message:
                                        type: string example: Auth logged in successful.
                                    data:
                                        type: object properties:
                                            user:
                                                type: object properties:
                                                    accessToken:
                                                        type: string
                                                    refresh                                             type: "string"

                "400":
                    descriptio         application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server Error content:
                        application         schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

    /auth/forget-password:
            summary: Allow user to get new password (send rest password token to user email) tags:
                - Authd: true content:
                    application/json:
                        schema:t properties:
                                refreshToken:
                                    type: string mini
                                    type: string example: testverstion@gmail.com
            responses:
                    description: OK content:
                        application/json:
                                type: object properties:
                                    success:oolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:                     type: integer example: 200
                                    message:
                                        type: string example: Auth logged in successful.
                                    data:
                                        type: object properties:
                                            user:
                                                type: obje                                 accessToken:
                                                        type: string
                                                    refreshToken:
                                                        type: "string"

                "400":
                    description: Bad request content:
                        application/json:                 schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    desc             application/json:
                            schema:
                              assword/{userId}/{token
            summary: Endpoint to rhon: parameters:
                - in: path
                  name: userId required: true description: Unique id schema:
                      type: string n: path
                  name: token required: true description: Unique token schema:
                      type: string minimum: 1 example: 6358c27dca30b98e0e68d063
            requestBody: required: true content:
                    application/json:
                        schema:t properties:d:
                                    type: string minimum: 1 example: 6358c27dca30
                                confirmPassword:e: string example: 6358c27dca30
            responses:
                "200":tent:
                        application/json:
                            schema:bject properties:
                                    success:
                                        type: booleaor:
                                        type: boolean example: false
                                    status:nteger example: 200
                                    message:g example: Your password has been Password Reset Successfully updated please login
                                    data:
                                        type: object properties:
                                            User:
                                                type: object properties:
                                                    loginL                                             type: string

                "400":
                    description: Bad request content:
                        applic           sche               "$ref": 
                "500":escription:   application/json:
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"


    /users/{userId}/follow:
        put:
                - Authorization: []
            summary: Flow given user based on request
                - in: path
                  name: userId required: true descripmum: 1 example: 639593f33994948bfb0756d0
            responses:
                "200":tent:
                        application/json:
                            schema:bject properties:
                                    success:
                                        type: booleaor:
                                        type: boolean example: false
                                    status:nteger example: 200
                                    message:
                                        type: string example: User has been followed successfully
                                    data:                     type: object properties:
                                            user:
                                                type: object "$ref": "#/components/schemas/AuthResponse"

                "400":
                    description: Bad request content:
                        application/json:         schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server Error content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"
    /users/{userId}/un-follow:
        put:
            security:
                - Author summary: Un flow given user based on request id tags:
                - User
            parameters: in: path name: userId required:     type: string minimum: 1 example: 639593f33994948bfb0756d0
            responses::escription: OK content:
                        application/json:
                            schema:
                                typ                 success:
                                        type: boolean example: true description:
                                    error:
                                        type     status:
                                        type: integer example: 200
                                    message: type: string a:
                                        type: object properties:
                                            user:         type: object "$ref": "#/components/schemas/AuthResponse"

                "400":quest content:
                        application/json:
                            schema: "#/components/schemas/BadRequestResponse"

                "500":ternal Server Error content:
                        application/json:
                            schema:onents/schemas/ServerErrorResponse"


    /admin/users/add:
        post:
            security:
                - Authorization: [] summary: Admin add new user tags:
                - Admin
            requestBody:
                required: true content:
                    multipart/       schema:           $ref: "#/comnses:
                "200":escription:   application/json:
                            schema:
                                                    success:
                                        type: boolean example: true description:
                                    error:
                                                 status:
                                        type: integer example: 201
                                    message:     type: string example: Auth Signup is success. An Email with Verification link has been sent to your account ${email} Please Verify Your Email first or use the
                                        email verification lik which is been send with the response body to verfiy your email
                                    data:
                                   
                "400":
                    description: Bad request content:
                        application/json:ema:
                                "$ref": "#/components/schemas/BadRequestResponse"
ternal Server Error content:
                        application/json:
                            schema: "#/components/schemas/ServerErrorResponse"
    /admin/users:
        get:
                - Authorization: []
            summary: Returns a list of users whose r
            description: admin only api parameters:
                - in: headeription: Admin authorization access token schema:
                      type: string
                - in: query
                      type: integer minimum: 1 example: 20
                  description: The numbers of items to return (the default value is 20)
                - in: queryame: page schema:
                      type: integer minimum: 1 example: 1
                  description: Pagination page number (the default value is 1)
                - in: query
                  name: filterBy schema:
                      type: string example:
                  description: Filter type (Example - rolen: query
                  name: role schema:
                      type: string example:
                  description: Role name (Example - user')
                - in: query
                  name: search schema:
                      type: string example:
                  description: search term (Example - Sa responses:
                "200":
                    description: OK content:
                        application/json:
                                             type: object properties:
                                    success:
                                                                                       status:
                                                                type: string example: Success
                                    data:
                                                                                                          type: object "$ref": "#/components/schemas/AdminAuthResponse"
:escription: Bad request content:
                        application/json:
                            schema:
                                "$r
                "500":
                    description: 500 Internal Server Error content:
                        application/json:ema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

            security:
                - Authorization: []d on request id tags:
                - Admin
            parameters:
                  name: userId required: true description: Unique id schema:
                      type: string minimum: 1 exampl
                "200":
                    description: OK content:n:
                            schema:
                                type: object properties:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                        type: integer example: 200
                                    me                             type: string example: Successfully updated post by ID ...
                                    data:
                                        type: object "$ref": "#/components/schemas/AuthResponse"
 "400":
                    description: Bad request content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500": description: 500 Internal Server Error content:
                        application/json:
                            schema:
                                "$ref": "#/c
    /admin/users/update/{userId}:
        put:
            summary: Edit user based on request id tags:
                - Admin
                - in: path
                  name: userId required: true descripmum: 1 example: 639593f33994948bfb0756d0
            requestBody:
                required: true content::
                                       
                        schema:
                            $ref: "#/components/sche
            responses:
                "200":
                        application/json:
                            schema:
                                type: object properties:
                                    success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                        type                 message:
                                        type: string example: Successfully updated post by ID ...
                                    data:
                                        type: object "$ref": "#/components/schemas/AuthResponse"

                "400":
                    description: Bad request content:     application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server Error content:
                        application/json:
                            schema:                     "$ref": "#/components/schemas/ServerErrorResponse"

    /admin/users/remove/{userId}:
        delete:urity: - Authorization: []
            summary: Delete user based on request id tags:
                - Admin
            parameters:
                  name: userId required: true description: Unique id schema:
                      type: string minimum: 1 ex
                "200":
                    description: OK content:/json:
                            schema:
                                type: object properties:
                                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:         type: integer example: 200
                                    message:
                                        type: string a: type: object nullable: true example: null
                "400":
                    description: Bad request content:n:
                            schema:
                                "$ref": "#/components
                "500":
                    description: 500 Internal Servern:
                            schema:
                                "$ref": "#/component
    /admin/products:
        get:
            security:
                - Authorization: []
            summary: Returns a list of products with info of owner who added tags:
                - Admin
            description: parameters:
                - in: query
                  name: limit schema:   type: integer minimum: 1 example: 20
                  description: The numbers of items to return (the default value is 20)
                - in: query
                  name: page schema:
                      type: integer minimum: 1 example: 1
                  description: Pagination page number (the default value is 1)
                - in: queryame: filterBy schema:
                      type: string example:
                  description: Filter type (Example - category)
                - in: query
                  name: category schema:
                      type: string example:
                  description: Category name (Example - books)
                - in: query
                  name: search schema:
                      type: string examp       description: search term (Example - nodejs)
            responses:
                "200": # status code
                    description: OK content:
                        application         schema:
                                type: object properties:
                                    success:
                                        type     error:
                                        type: boolean example: false
                                    status: type: integersage:
                                        type: string example: Successful Found products
                                    data: type: object properties:
                                            totalDocs:
                                                type:     totalPages:
                                                type: integer
                                            lastPage         type: integer
                                            count:
                                                type     currentPage:
                                                type: object properties:
                                                    page:
                                                        type: integer minimum: 1
                                                    limit:
                                                                     nextPage:
                                                type: object properties:
                                                    page:
                                                        type: integer minimum: 1
                                                    limit:
                                                        type: integer minimum: 1
                                            products:                             type: array items:
                                                    type: object "$ref": "#/components/schemas/AdminProductResponse"

                "400":
                    description: Bad request content:
                        application/json:
                            schema:
                                "$ref": "#/
                "500":
                    description: 500 Internal Server Error content:
                        applica             sc                 "$ref": "#/components/schemas/ServerErrorResponse"

    /admin/products/{productId}:
        get:
                - Authorization: []
            summary: Get product based on reques example:t id tags:
                - Admin
            parameters:
                - in: path
                  name: productId required: true description: Unique id schema:
                      type: string es:
                "200":
                    description: OK content:
                        application/json:ema:
                                type: object properties:
                                    success: type: booleanor:
                                        type: boolean example: false
                                    status: type: integer example: 200
                                    message:
                                        type: string a:
                                        type: object properties:
                                            product:         type: object "$ref": "#/components/schemas/AdminProductResponse"
                "400":
                    description: Bad request contentn:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500": description: 500 Internal Server Error content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

    /admin/products/add:
        post:y:
                - Authorization: []
            summary: Admin add a new product tags:
                - Admin
            requestBody:
                required: true content:
                    multipart/form-data:
                        schema:
                            $ref: "#/components/schemas/ProductRequest"
            responses:     "201":
                    description: OK content:
                        application/json:
                            schema:
                                                                                       error:
                                                                type: integer example: 201
                                    message:
                                                   data:
                                        type: object properties:
                                            product:
                                                type: object "$ref": "#/components/schemas/AdminProductResponse"

                "400":
                    description: Ba     application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                    description: 500 Internal Server Error content:
                        application/json: "#/components/schemas/ServerErrorResponse"

    /admin/products/update/{productId}:
            security:
                - Authorization: []ct based on request id tags:
                - Admin
            parameters:
                  name: productId required: true description: Unique id schema:
                      type: string minimum: 1 exampl
                required: true content:
                    multipart/form-data:
                        schema:         $ref: "#/components/schemas/ProductRequest"
            responses:
                "200":
                    description: OK content:
                        application/json:
                            schema:
                                type: object properties:                 success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                        type: integer example: 200
                                    message:
                                        type: string example: Auth Signup is success. An Email with Verification link has been sent to your account ${email} Please Verify Your Email first or use the
                                        email verification lik which is been send with the response body to verfiy your email
                                    data:                             type: object properties:
                                            product:
                                                type: object "$ref": "#/components/schemas/AdminProductResponse"

                "400":   description:       application/json           schema:
                                "$:
                    description: 500 Internal Server Error content:
                        application/json:
                            schema:             "$ref": "#/components/schemas/ServerErrorResponse"

    /admin/products/delete/{productId}:
        delete:
                - Authorization: []
            summary: Delete product based on request 
                - in: path
                  name: productId required: true descmum: 1 example: 6398540ee6e5ae8c37c333ac
            responses:
                "200":tent:
                        application/json:
                            schema:bject properties:
                                    success:
                                        type: booleaor: type: boolean example: false
                                    status:
                                        type                 message:
                                        type: string example: Successfully deleted product by ID ...
                                    data:
                                        type: object nullable: true example: null
                "400":
                    description: Bad request content:
                        application/json:         schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server Error content:
                        application/json:
                            schema:
                                "$ref"
    /admin/products/clear-all-products:
        delete: summary: Admin delete all the products in db security:
                - Authorization: []
            tags: Adminnses:200":
                    description: O   applicat       schema:
                                type: object properties:
                                                               error:                       type: boolean example: false
                                              example:        type: integer example: 200
                           message:
                                        type: string example: Successful cleared all products
                                    data:
                                   
                "400":
                    description: Bad request content:
                        application/json:ema:
                                "$ref": "#/components/schemas/BadRequestResponse"
ternal Server Error content:
                        application/json:
                            schema: "#/components/schemas/ServerErrorResponse"

    /admin/orders:
            summary: Returns a list of orders for all users security:
                - Authorization: []
                - Admin
            description: responses:tent:
                        application/json:
                            schema:
                                type: object                 success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                        type: integer example: 200
                                    message:                     type: string example: Successful Found all orders
                                    data:
                                        type: object properties:
                                            orders:
                                                type: object "$ref": "#/components/schemas/AdminOrderResponse"

                "400":
                    description: Bad request content:             application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"
 "500":     description: 500 Internal Server Error content:
                        application/json:
                            schema:
                                "$ref": 
    /admin/orders/get-user-order/{userId}:
        get: of all the
            tags:
                - Admin
            parameters:n: path
                  name: userId required: true description: Unique id schema:
                      type: string minimum: 1 example: 6395894b31dbc5441a53ae6e
            description: responses:
                    description: OK content:
                        application/json:bject properties:
                                    success:
                                        type: booleanor:
                                        type: boolean example: false
                                    status: type: integer example: 200
                                    message:
                                        type: stringa:
                                        type: object properties:
                                            orders:         type: object "$ref": "#/components/schemas/AdminOrderResponse"

                "400":ntent:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server Error content:
                        application/json:         schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

    /admin/orders/{orderId}:
        get:
            summary: Get single order based on request id security:
                - Authorization: []
                - Admin
            description: parameters:
                - in: path
                  name: orderId required: true description: Unique id schema:
                      type: string minimum: 1 example: 6398540ee6e5ae8c37c333ac
            responses:
                "200":         description: OK content:
                        application/json:
                            schema:
                                                                       type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    stat             type: integer example: 200
                                    message:
                                        type: st data:     type: object properties:
                                            order:
                                                
                "400":
                    description: Bad request content:
                        application         schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":: 500 Internal Server Error content:
                        application/json:
                            schema: "#/components
        patch:
            summary: Update order status security:
            tags:
                - Admin
                - in: path
                  name: orderId required: true descrmum: 1 example: 63aea7d0cfd10d1caa4cdfda
            description: requestBody:
                required: true content:
                        schema:
                            type: object properties:
                                    type: string enum:
                                        - "pending" - "delivered" - "waiting payment" - "waiting pickup" - "shipped" - "cancelled" - "completed"
                                    default: "completed"

            responses:
                "200":
                    description: OK content:     application/json:
                            schema:
                                type: object properties:
                                    success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean exam                 status:
                                        type: integer example: 200
                                    message:
                                        type: string example: Successfully update order by ID ...
                                    data:
                                        type: object properties:
                                            order:
                                                type: object "$ref": "#/components/schemas/AdminOrderR
                "400":
                    desc             application/json:
                            schema:
                              500":   description: 500 Internal Server Error content:
                        applicatio       sche           "$ref": "#/components/schemas/ServerErrorResponse"

        delete:ry: Delete sing Authorization: []
                - Admins: path
                  name: orderId required: true description: Unique id schema:
                      type: strcription: respo "200":
                    description: OK content:
                        application/json:
                            schema:     type: object properties:
                                    success:
                                        type: bo error:     type: boolean example: false
                                    status:
                                        type: in message:
                                        type: string example: Successfully deleted order by ID ...
                                    data:
                                   
                "400":
                    description: Bad request content:
                        application/json:ema:
                                "$ref": "#/components/schemas/BadRequestResponse"
ternal Server Error content:
                        application/json:
                            schema: "#/components/schemas/ServerErrorResponse"

    /admin/orders/clear-user-order/{userId}:
            summary: Admin delete all the order for given user id security:
                - Authorization: []
                - Admin
            parameters:
                  name: userId required: true description: Unique id schema:
                      type: string minimum: 1 example: 63958
                "200":
                    description: OK content:
                        application/json:
                            schema:
                                type: object                 success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                        type: integer example: 200
                                    message:                     type: string example: Successfully deleted all orders for user by ID ...
                                    data:
                                        type: object nullable: true example: null

                "400":
                    description: Bad request content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server Err             application/json:
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

    /admin/orders/clear-all-orry: Admin delete all th Authorization: []
            tags:in:
                "200":
                    description: OK content:
                        application         schema:
                                type: object properties:
                                    success:
                                        type     error:
                                        type: boolean example: false
                                    status: type: integersage:
                                        type: string example: Successful Cleared all orders
                                    data: type: object nullable: true example: null

                "400":quest content:
                        application/json:
                            schema: "#/components/schemas/BadRequestResponse"

                "500":ternal Server Error content:
                        application/json:
                            schema:onents/schemas/ServerErrorResponse"

    /admin/feed/posts:
        get:: Returns a list of posts with full info of their creator tags:
                - Admin
            security:
                - Authorization: []
            description: parameters:
                - in: query
                  name: limit schema:   type: integer minimum: 1 example: 10
                  description: The numbers of items to return (the default value is 10)
                - in: query
                  name: page schema:
                      type: integer minimum: 1 example: 1
                  description: Pagination page number (the default value is 1)
                - in: query
                  name: filterBy schema:
                      type: string example:
                  description: Filter type (Example - categ     - in: query
                  name: category schema:
                      type: string example:
                  description: Category name (Example - coding)
                - in: query name: search s     type: string examp description: search term (Example - nodejs)
            responses::escription: OK content:
                        application/json:
                            schema:
                                typ                 success:
                                        type: boolean example: true description:
                                    error:
                                        type     status:
                                        type: integer example: 200
                                    message: type: string a:
                                        type: object properties:
                                            totalDocs         type: integer minimum: 0
                                            totalPages:
                                                type:     lastPage:
                                                type: integer
                                            count:         type: integer
                                            currentPage:
                                                type             page:
                                                        type: integer minimum: 1
                                                    limit:         type: integer minimum: 1
                                            nextPage:
                                                type: object properties:
                                                                                 type: integer minimum: 1
                                                    limit:
                                                        type: integer minimum: 1
                                            posts:
                                                type: array items:
                                                    type: object "$ref": "#/components/schemas/AdminPostResponse"
0":
                    description: Bad request content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server Error content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"
t:
            security:
                - Authorization: []
            summary: Admin add - Admin
            requestBody:
                required: true content:
                    multipart/form-data:
                        schema:
                            "$ref": "#/components/schemas/PostRequest"
            responses:1":
                    description: OK content:
                        application/json:
                            schema: type: object properties:
                                    success:
                                        type: booleanor: type: boolean example: false
                                    status:
                                        type: integersage:
                                        type: string example: Successfully added new post
                                    data: type: object properties:
                                            post:
                                                type
                                       
                "400":
                    description: Bad request contentn:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"
0":
                    description: 500 Internal Server Error content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

    /admin/feed/posts/{postId}:
            summary: Return post based on request id tags:
                - Admin
            security:
                - Authorization: []
            parameters:
                - in: path
                  name: postId required: true description: Unique id schema:
                      type: string minimum: 1 example: 63baa65d8d3ae49ad7361509 responses:
                "200":
                    description: OK con             application/json:
                            schema:
                                t                   success:                       type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                                    type: integer example: 200
                                                             data:
                                        type: object properties:
                                            post:
                            400":
                    description: Ba   applicat       schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":   description: 500 Internal Server Error content:
                        applicatio       schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

        patch:ity:
                - Authorization: [Admin update post based on request id tags:
                - Admin
            parameters:
                - in: path name: postId required: true description: Unique id schema:
                      type: stringdy:
                required: true content:
                    multipart/form-data:
                        schema:
                            "$ref":es:
                "200":
                    description: OK content:
                        application/json:ema:
                                type: object properties:
                                    success: type: booleanor:
                                        type: boolean example: false
                                    status: type: integer example: 200
                                    message:
                                        type: string a:
                                        type: object properties:
                                            post:         type: object "$ref": "#/components/schemas/AdminPostResponse"

                "400":quest content:
                        application/json:
                            schema:onents/schemas/BadRequestResponse"

                    description: 500 Internal Server Error content:
                        application/json:
                            schema:             "$ref": "#/components/schemas/ServerErrorResponse"

        delete:
            security:
                - Authorization: []
            summary: Admin delete single post based on request id tags:
                - Adminers:
                - in: path
                  name: postId required: true description: Unique id schema:
                      type: string minimum: 1 example: 63bae1dbc7c5b2f65f3cbd97
            responses:
                "200":
                    description: OK content:
                        application/json:
                            schema:
                                type: object propertie                         success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                                                mess                       type: string example: Successfully deleted post by ID ...
                                             :
                    description: Bad request content:
                        application/json:
                            schema:             "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internation/json:
                            schema:
                                "$ref": "#/components
        delete:
            security:
            summary: Admin delete all posts for given user tags:
                - Admin
                - in: path
                  name: userId required: true descrimum: 1 example: 63bae1dbc7c5b2f65f3cbd97
            responses:
                "200":tent:
                        application/json:
                            schema:
                                type: object                 success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                        type: integer example: 200
                                    message:                     type: string example: Successfully deleted all posts for user by ID ...
                                    data:
                                        type: object nullable: true example: null
                "400":
                    description: Bad request content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":         description: 500 Internal Server Error content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"
osts/clear-all-ry: Admin delete all the posts in db security:
                - Authorization: [in
            responses:
                "200":     description: OK content:
                        application/json:
                            schema:
                                type: object properties:
                                    success:
                                        type: boolean example: true description:
                                    error:
                                                    status:
                                        type: integer example: 200
                                    message:
                                        type     data:
                                        type: object nullable: true example: null
quest content:
                        application/json:
                            schema: "#/components/schemas/BadRequestResponse"

                "500":ternal Server Error content:
                        application/json:
                            schema: "#/components/schemas/ServerErrorResponse"

    /admin/feed/posts/comment/{postId}:
            security:
                - Authorization: []
            summary: Admin delete all commendmin
            parameters:
                - in: path
                  name: postId required: true description: Unique id schema:
                      type: string minimum: 1 example: 63bae1dbc7c5b2f65f3cbd97
            responses:
                "200": description: OK content:
                        application/json:
                            schema:
                                type: object properties:
                                    success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                        type: intege                         message:
                                        type: string example: Successfully deleted all comments in post by ID ...
                                    data:
                                        type: object properties:
                                             400":
                    description: B   applicat       schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500": description: 500 Internal Server Error content:
                        application/json:
                            schema:
                                "$ref": "#/c
    /admin/feed/posts/comment:
        delete:
            summary: Admin delete one comment based on request id tags:
                - Admin
                required: true content:
                    application/json:
                            "$ref": "#/components/schemas/DeletePostCommentRequest"
            responses:
                    description: OK content:
                        application/json:bject properties:
                                    success:
                                        type                 error:
                                        type: boolean example: false
                                    status:
                                        type: integer example: 200
                                    message:
                                        type: string example: Successfully delete comment by ID ...
                                    data:                     type: object properties:
                                            post:
                                                type: object "$ref": "#/components/schemas/AdminPostResponse"

                "400":
                    description: Bad request content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"
     "500":
                    description: 500 Internal Server Error content:
                                         schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"


            security:
                - Authorization: []
            summary: Returns Manager
            description: admin only headere: authToken description: Authorization access token schema:
                      type: string
            responses:
                "200":   description: OK content:
                        applicatio       schema:
                                type: object properties:
                                    success:
                                                   error:
                                                 status:
                                        type: integer example: 200
                                    message:
                                                 data:
                                                         users:
                                                type: array items:
                                                    type: object "$ref": "#/components/schemas/AdminAuthResponse"

                "400": description: Bad request content:
                        application/json:
                            schema:
                                "$ref": "#/c
                "500":
                    description: 500 Internal Server n:
                                "$ref": "#/components/schemas/ServerErrorResponse"

        get:
            summary: Returns a list of orders for cus
            tags:
                - Manager
                "200":
                    description: OK content:n:
                            schema:
                                type: object properties:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                    status:
                                        type: integer example: 200
                                    message:
                                        type: string example: Successful Found all orders
                                    data:bject properties:
                                            orders:
                                                type: object "$ref": 
                "400":
                    description: Bad request content:
                            schema:
                                "$ref": "#/components/schema
                "500":
                    description: 500 Internal Server Error content:
                            schema:
                                "$ref": "#/components/schemas/ServerE
    /manager/feed/posts:
        get:ich created by customer whose role is a user tags:
                - Manager
                - Authorization: []
            description: parameters:
                - in: queryame: limit schema:
                      type: integer minimum: 1 example: 10
                  description: The numbers of items to return (the default value is 10)
                - in: query
                  name: page schema:
                      type: integer minimum: 1 example: 1
                  description: Pagination page number (then: query
                  name: filterBy schema:
                      type: string example:
                  description: Filter type (Example - category)
                - in: query
                  name: category schema:
                      type: string example:
                  description: Category name (Example - coding)
                - in: query
                  name: search schema:           type: string example:
                  description: search term (Example - nodejs)
            responses:
                "200":
                    description:        applicat           schema:               type: object properties:
                                                            error:
                                        type: boolean example: false
                                    status:
                                                    message:
                                        type: string example: Successful Found posts
                                    data:
                                        type             totalDocs:
                                                type: integer minimum: 0
                                            totalPage         type:     lastPage:
                                                type: integer
                                            count:         type: integer
                                            currentPage:
                                                type:             page:
                                                        type: integer minimum: 1
                                                                     type: integer minimum: 1
                                            nextPage:
                                                type             page:
                                                        type: integer minimum: 1
                                                    limit:         type: integer minimum: 1
                                            posts:
                                                                             type: object "$ref": "#/components/schemas/AdminPostResponse"

                "400":
                    description: Bad request content:
                        application/json:
                            schema:
                                "$ref": "#/components/sche
                "500":
                    description: 500 Internal Server Error content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

    # Moderator

    /moderator/users::
            security:
                - Authorization: []
            summary: Returns a - Moderator
            description: moderator only api responses:
                "200":
                    description: OK content:
                        application/json:
                            schema:
                                typ                 success:
                                        type: boolean example: true description:
                                    error:
                                        type     status:
                                        type: integer example: 200
                                    message: type: string a:
                                        type: object properties:
                                            users:         type: array items:
                                                    type: object "$ref": "#/components/schemas/AdminAuthResponse"

                    description: Bad request content:
                        application/json:
                                "$ref": "#/components/schemas/BadRequestResponse"

                    description: 500 Internal Server Error content:
                        application/json:
                                "$ref": "#/components/schemas/ServerErrorResponse"

    # Supervisor
    /supervisor:
        get:
            security:
                - Authorization: []
            summary: supervisor role api tags:
                - Supervisor api - (todo)tion: supervisor only api parameters:
                - in: header
                  name: authToken description: Authorization access token schema:
                      type: string
            responses:
                "200":
                    description: OK content:
                        application/json:
                            schema:
                                type: object properties:                         success:
                                        type: boolean example: true description:
                                    error:
                                        type: boolean example: false
                                                                   mess                       type: string example: Success
                                             
                "400":
                    descriptio         application/json:
                            schema:
                                "$ref": "#/components/schemas/BadRequestResponse"

                "500":
                    description: 500 Internal Server Error content:
                        application         schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"

    # filestream
        get:
            summary: Api for testing pdf document ser
                "200":
                    description: OK content::
                            schema:
                                type: string format: 
                "400":
                    description: Bad request contentn:
                                       
                            schema:
                                "$ref": "#/component
                "500":
                    description: 500 Internal Server Error c
                            schema:
                                "$ref": "#/components/schemas/ServerErrorResponse"
    # Deprecated APIs
    /test/healthChecker:
        get:
            deprecated: true summary: This endpoint is been deprecated tags:
                - Deprecated APIs
            responses:
                "410": description: Deprecated content:
                        application/json:
                            schema:
                                schema: "$ref": "#/components/schemas/DeprecatedApiResponse"

    /checkout:
        get:
            deprecated: true summary: This endpoint is been deprecated tags:
                - Deprecated APIs
            responses:     "410":
                    description: Deprecated content:
                        application/json:
                            schema:
                                s:
            deprecated: true summarecated API:
                "410":
                    description: Deprecated content:
                        application         schema:
                                schema: "$ref": "#/components/schemas/DeprecatedApiResponse"

    /admin/posts/{postId}:
            deprecated: true summary: This endpoint is been deprecated tags:
                - Deprecated APIs
                    description: Deprecated content:
                        application/json:
                                schema: "$ref": "#/components/schemas/DeprecatedApiResponse"

            security:
                - Authorization: []een deprecated tags:
                - Deprecated APIs
            deprecated: true responses:ated content:
                        application/json:
                            schema:             schema: "$ref": "#/components/schemas/DeprecatedApiResponse"

        delete:
            security:
                - Authorization: []
            summary: Delete post based on request id tags:
                - Deprecated APIsted: true responses:
                "410":
                    description: Deprecated content:
                        application/json:
                            schema:
                                schema: "$ref": "#/components/schemas/DeprecatedApiResponse"

    /moderator/users/band/{userId}:ete:
            deprecated: true summary: This endpoint is been deprecated tags:
                - Deprecated APIs
            responses:
                "410":
                    description: Deprecated content:
                        application         schema:
                                schema: "$ref": "#/components/schemas/DeprecatedApiResponse"

components:
        HealthCheckResponse:
            type: object properties:le: true description:
                error:
                    type: boolean example: false
                    type: integer example: 200
                message:e: "Welcome to Rest API - 👋🌎🌍🌏"
                data:
                    type: object nullable: true exam
        User:
            type: object properties:
                name:
                    type: string required: true
                surname: type: string
                email:
                    type: string required: true
                dateOfBirth:
                    type: string
                gender:
                    type: stringfileImage:
                    type: string
                mobileNumber:
                    type: string
                companyName:
                    type: string
                nationality:
                    type: string     address:
                    type: string
                bio:
                    type: string
                jobTitle         type: string

        AuthRequest:bject description: Model containing post request info properties:
                name:
                    type: string example: test
                surname:g example: test
                email:
                    type: string example: testverstioe: 12345test
                confirmPassword:
                    type: string example: 12345test
                    type: boolean default: true
                dateOfBirth:e: "09/10/1984"
                gender:
                    type: string example: male
                    type: string example: "+62213147666"
                companyName:e: Test company
                nationality:
                    type: string example: Sudan
                    type: string example: cat
                address:
                    type: string example: 12:
                    type: string example: "Software Engineer experienced in developing full-stack JavaScript/Typescript application primarily with React/Next/Redux and Node/Express server design"
                jobTitle:
                    type: string example: Software Engineering
                profileImage:
                    type: string format: binary description: Image type /png/jpg/jpeg/webp
e:
            type: object properties:
                _id:
                    type: string
                name:
                    type: string required: true
                surname:
                    type: string     email:
                    type: string required: true
                dateOfBirth:
                    type: string
                gender:
                    type: string
                createdAt:   type: stringpdatedAt:   type: string
                profileImage:ype: stringeNumber:
                    type     companyName:
                    type: string
                nationality: type: string
                favoriteAnimal:
                    type: string
                address:g
                bio:
                    type: string
                followings:
                    type: array items:ref": "#/components/schemas/FollowUserScheme"
                followers:
                    type: array items:ref": "#/components/schemas/FollowUserScheme"
                cart:
                    type: object properties:
                            type: array items:
                                type: object "$ref":
        AdminAuthRequest:
            type: object description: Model containing admin
                    type: string enum:
                        - "user" - "admin" - "manger" - "supervisor" - "moderator" - "guide" - "client"
                    default: "user"tus:
                    type: string enum:
                        - "pending" - "active"
                    default: "active"
                name:
                    type: string example: test
                surname: type: string example: test
                email:
                    type: string example: testverstion@gmail.com
                acceptTerms:
                    type: boolean default: true
                dateOfBirth:
                    type: string example: "09/10/1984"
                gender:         type: string example: male
                mobileNumber:
                    type: string example: "+62213147666"
                companyName:
                    type     nationality:
                    type: string example: Sudan
                favoriteAnimal:   type: stringddress:   type: string example: 12345test home Batam Indonesia
                bio:ype: stringtle:
                    type: string example: Software Engineering
                profileImage:
                    type: string fo
        AdminAddUserRequest:
            type: object description: Model containing admin auth request info properties:
                role:g enum:
                        - "user" - "admin" - "manger" - "supervisor" - "moderator" - "guide" - "client"
                    default: "user"
                        - "pending" - "active"
                    default: "active"
                    type: string example: test
                surname:e: test
                email:
                    type: string example: testversti
                    type: string example: 12345test
                confirmPassword:e: 12345test
                acceptTerms:
                    type: boolean default: true
                    type: string example: "09/10/1984"
                gender:
                    type: string example: maileNumber:
                    type: string example: "+62213147666"
                companyName:
                    type: string example: Test company
                nationality:
                    type: string example: Sudan
                favoriteAnimal: type: string example: cat
                address:
                    type: string example: 12345test home Batam Indonesia
                bio:
                    type: string example: "Software Engineer experienced in developing full-stack JavaScript/Typescript application primarily with React/Next/Redux and Node/Express server design"
                jobTitle:
                    type: string example     profileImage:
                    type: string format: binary description: Image type /png/jpg/jpeg/webp

        AdminAuthResponse:
            type: object properties:
                _id:
                    type: striname:   type: string requireurname:
                    type: string:ype: string required: true
                dateOfBi         type: string
                gender:     type: string
                createdAt:
                    type: string
                updatedAt:tring
                isVerified:
                    type: string
                    type: string
                companyName:
                    type: string
                acceptTerms:
                    type: string
                nationality: type: string
                favoriteAnimal:
                    type: string
                address:g
                bio:
                    type: string
                followings:
                    type: array items:ref": "#/components/schemas/FollowUserScheme"
                followers:
                    type: array items:ref": "#/components/schemas/FollowUserScheme"
                cart:
                    type: object properties:
                            type: array items:
                                type: object "$ref":
        ServerErrorResponse:
            type: object properties:
                    type: boolean example: false description:
                error:
                    type: boolean example: ttus:
                    type: integer example: 500
                message:
                    type: string example: Internal Server Error (different message based on request)
                data:
                    type: object nullable: true example: null
esponse:
            type: object properties:
                success:
                    type: boolean example: false description:
                error:
                    type: boolean example: true
                status:         type: integer example: between 400 - 500
                message:
                    type: string example: Bad request (different message based on request)
                data:
                    type: object nullable: true example: null

        DeprecatedApiResponse: object propertuccess:   type: boolean example: false description:
                error:ype: booleas:
                    type     message:
                    type: string example: Deprecated API
                data: type: object nullable: true example: null

        SignUpResponse:
            type: object properties:
                    type: boolean example: true description:
                error:le: false
                    type: integer example: 200
                message:e: Auth Signup is success. An Email with Verification link has been sent to your account ${email} Please Verify Your Email first or use the email verification
                    lik which is been send with the response body to verfiy your email
                data:ties:
                        user:
                            type: object properties:oken:
                                    type: string
                                refreshToken:e: "string"rificationLinkToken:
                                    type: string

        ProductRequest:bject description: Model containing product request info properties:
                category:
                    type: string enum:
                        - "men's clothing" - "women's clothing" - "women's shoes" - "men's shoes" - "toys" - "football" - "books" - "personal computers" - "jewelery" - "electronics" - "sports" - "all
                        products"
                    default: "books"
                name: type: string example: Clean Architecture
                description:
                    type: string example: Clean Architecture TypeScript Express API Book
                brand:
                    type: string example: Rest Api
                price:
                    type: number example: 99
                stock:         type: string example: "in stock - order soon"
                productImages:
                    type: array items:
                        type: string format: binary description: Image type /png/jpg/jpeg/webp

        ProductResponse:
            type: object propeid:   type: stringame:
                    type: stringiption:ype: string
                price:         type: string
                brand:
                    type: stringegory:
                    type: string
                productImage:
                    type: string
                    type: string
                createdAt:
                    type: string
                ratings:
                numberOfReviews:
                    type: number
                    type: array items:
                        type: object "$ref": "#/comp
                    type: object "$ref": "#/components/schemas/ResponseAdditionalInfo"

                _id:
                    type: string
                name: type: string
                description:
                    type: string
                price:
                    type: string
                brand:
                    type: stringegory:
                    type: string
                productImage:
                    type: string
                stock:
                    type: string
                createdAt:
                    type: string     updatedAt:
                    type: string
                ratings:
                    type: number
                numberOfReviews:
                    type: number
                reviews: type: array items:
                        type: object "$ref": "#/components/schemas/AdminReviewsResponse"
                request:
                    type: object "$ref": "#/
                    type: object "$ref": "#/components/schemas/AdminAuthResponse"

                user:
                    type: object "$ref": "#/component
                    type: string
                rating:
                comment:
                    type: string
        ReviewsResponse:
            type: object properties:
                name:
                    type: string
                rating: type: number
                comment:
                    type: string

        ResponseAdditionalInfo:
            type: object properties:
                type: type: string example: "GET"
                description:
                    type: string
                url:
                    type: string

        AuthCartResponse:
            type: object properties:     product:
                    type: object "$ref": "#/components/schemas/ProductResponse"
                quantity:
                    type: number
                _id:         type: string
        CartResponse:
            type: object propuantity:
                    type: numberct:ype: object "$ref": "#/components/schemas/ProductResponse"

        OrderResponse:
            type: object proid:
                    type: stringingInfo:ype: object "$ref": "#/components/schemas/ShippingInfo"
                paymentInfo:
                    type: string
                textAmount:   type: number
                shippingAmount:ype: number
                totalAmount:
                    type: number
                orderStatus:   type: string
                deliveredAt:ype: string
                createdAt:
                    type: string
                updatedAt:   type: string
                user:ype: object properties:
                        email:
                            type: string
                        name:
                            type: s     surname:
                            type: string
                        phone:
                            type: string:
                            type: string
                        userId:t "$ref": "#/c
                    type: array items:
                        type: object properties:
                                type: string
                            quantity:umber
                            product:
                                type: object "$ref":
        AdminOrderResponse:
            type: object properties:
                    type: string
                shippingInfo:ponents/schemas/ShippingInfo"
                paymentInfo:
                    type: string
                textAmount:
                    type: number
                shippingAmount:
                    type: number
                totalAmount:
                    type: number
                    type: string
                deliveredAt:
                createdAt:
                    type: string
                    type: string
                user:
                        email:
                            type: string
                            type: string
                        surname:
                        phone:
                            type: string
                            type: string
                            type: object "$ref": "#/components/schemas/AdminAuthResponse"
                orderItems:
                    type: array items:     type: object properties:
                            _id:
                                type: string
                            quantity:
                                type: number
                            product:
                                type: object "$ref": "#/co
        ShippingInfo:
            type: object properties:
                address:
                    type: string
                zipCode:
                    type: string
                street:
                    type: string     city:
                    type: string
                phoneNo:
                    type: stri status:
                    type: string
                country:
                    type: string

        PostRequest:
            type: object descriptioegory:
                    type: string enum:
                        - "coding" - "sports" - "reactjs" - "nextjs" - "nodejs" - "typescript" - "devapp" - "blockchain" - "social"
                    default: "social"
                    type: string example: Clean Architecture Review
                content:e: Clean Archi
                    type: string format: base64 description: Image type /png/jpg/jpeg/webp

            type: object properties:
                _id:
                title:
                    type: string
                    type: string
                postImage:
                createdAt:
                    type: string
                    type: string
                likes:
                    type: array items:     type: object "$ref": "#/components/schemas/PostLikeResponse"
                comments:
                    type: array items:
                        type: object "$ref": "#/components/schemas/PostCommentResponse"
                author:
                    type: object "$ref": "#/components/schemas/LikeAndCommentUser"
                request: type: object "$ref": "#/components/schemas/ResponseAdditionalInfo"

        AdminPostResponse:
            type: object properties:
                _id:
                    type: string
                title:
                    type: string     content:
                    type: string
                postImage:
                    type: string
                createdAt:
                    type: string
                updatedAt:   type: stringikes:   type: array items:
                        type: objents:ype: array items:
                        type: object "$ref": "#/components/schemas/PostCommentResponse"
                author:
                    type: object "$uest:
                    type: object "$ref": "#/components/schemas/ResponseAdditionalInfo"

        PostCommentResponse:ties:
                comment:
                    type: string: "#/components/schemas/LikeAndCommentUser"
                request:
                    type: object "$ref": "#/component
        PostLikeResponse:
            type: object properties:
                    type: object "$ref": "#/components/schemas/LikeAndCommentUser"

            type: object properties:
                postId:e: 63db0cb558191bf1d20542d4
                comment:
                    type: object example: comment
        updatePostCommentRequest:
            type: object properties:tId:
                    type: object example: 63db0cb558191bf1d20542d4
                commentId:
                    type: object example: 63db0cb558191bf1d20542d4
                comment:
                    type: object example: comment
ommentRequest:
            type: object properties:
                postId:
                    type: object example: 63db0cb558191bf1d20542d4
                commentId:
                    type: object example: 63db0cb558191bf1d20542d4

        LikeAndCommentUser:
            type: object properties:     _id:
                    type: string
                name:
                    type: string
                surname:   type: stringio:   type: string
                profileImage:ype: string
        FollowUserScheme:
            type: object prope _id:
                    type: string
                userId:
                    type: string
                name:
                    type: string required: true
                surname: type: string
                profileImage:
                    type: string

        Authorization:
            type: http scheme: "bearer" bearerFormat:
                   - "all
